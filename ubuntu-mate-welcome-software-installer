#!/usr/bin/env python3

# Copyright (C) 2015 Martin Wimpress <code@ubuntu-mate.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.


import gettext
import os
import platform
import subprocess
import sys
import urllib.request
from gi.repository import GLib, Notify

from aptdaemon.client import AptClient
from aptdaemon.gtk3widgets import AptErrorDialog, AptConfirmDialog, AptProgressDialog
import aptdaemon.errors
from aptdaemon.enums import *

# i18n
gettext.install("ubuntu-mate-welcome", "/usr/share/locale")

class SimpleApt(object):
    def __init__(self, packages):
        self._timeout=100
        self.packages=packages
        self.source_to_update = None
        self.update_cache = False
        self.loop = GLib.MainLoop()
        self.client = AptClient()
        print('Installing ' + ','.join(self.packages))

    def on_error(self, error):
        if isinstance(error, aptdaemon.errors.NotAuthorizedError):
            # Silently ignore auth failures
            return
        elif not isinstance(error, aptdaemon.errors.TransactionFailed):
            # Catch internal errors of the client
            error = aptdaemon.errors.TransactionFailed(ERROR_UNKNOWN,str(error))
        error_dialog = AptErrorDialog(error)
        error_dialog.run()
        error_dialog.hide()

    def on_finished_update(self, transaction, status):
        if status != 'exit-success':
            self.do_notify(status)
            self.loop.quit()
            sys.exit(1)
        GLib.timeout_add(self._timeout,self.do_install)
        return True

    def on_finished_install(self, transaction, status):
        self.loop.quit()
        if status != 'exit-success':
            sys.exit(1)
        else:
            self.do_notify(status)

    def do_notify(self, status):
        print(status)
        if status == 'exit-success':
            Notify.init(_('Install complete'))
            apt_notify=Notify.Notification.new (_('Install complete'),_(','.join(self.packages) + ' has been successfully installed.'),'dialog-information')
        elif status == 'exit-cancelled':
            Notify.init(_('Install cancelled'))
            apt_notify=Notify.Notification.new (_('Install cancelled'),_('The installation of ' + ','.join(self.packages) + ' has been cancelled.'),'dialog-information')
        else:
            Notify.init(_('Install failed'))
            apt_notify=Notify.Notification.new (_('Install failed'),_('The installation of ' + ','.join(self.packages) + ' failed.'),'dialog-error')

        apt_notify.show()

    def do_update(self):
        if self.source_to_update:
            apt_update = self.client.update_cache(self.source_to_update)
        else:
            apt_update = self.client.update_cache()
        apt_update.connect("finished",self.on_finished_update)
        
        update_dialog = AptProgressDialog(apt_update)
        update_dialog.run(close_on_finished=True, show_error=True,
                reply_handler=lambda: True,
                error_handler=self.on_error,
                )
        return False

    def do_install(self):
        apt_install = self.client.install_packages(self.packages)
        apt_install.connect("finished", self.on_finished_install)

        install_dialog = AptProgressDialog(apt_install)
        install_dialog.run(close_on_finished=True, show_error=True,
                        reply_handler=lambda: True,
                        error_handler=self.on_error,
                        )
        return False

    def install_packages(self):
        if self.update_cache:
            GLib.timeout_add(self._timeout,self.do_update)
        else:
            GLib.timeout_add(self._timeout,self.do_install)
        self.loop.run()


if __name__ == "__main__":
    if len(sys.argv) >= 2:
        packages = sys.argv[1].split(',')
    else:
        print('No package(s) supplied')
        sys.exit(1)

    codename = platform.dist()[2]
    transaction = SimpleApt(packages)

    # Perform any pre-install configuration. Basically enabling repositories or
    # adding PPAs.
    if 'skype' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'skype'])
        transaction.update_cache = True
    elif 'telegram' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'telegram'])
        transaction.update_cache = True
    elif 'google-chrome-stable' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'google-chrome'])
        transaction.update_cache = True
        transaction.source_to_update = 'google-chrome.list'
    elif 'syncthing' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'syncthing'])
        transaction.update_cache = True
        transaction.source_to_update = 'syncthing.list'        
    elif 'steam-launcher' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'steam'])
        transaction.update_cache = True
        transaction.source_to_update = 'steam.list'
    elif 'spotify-client' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'spotify'])
        transaction.update_cache = True
        transaction.source_to_update = 'spotify.list'
        if codename == 'vivid' or codename == 'wily':
            transaction.packages.append('libgcrypt11')
    elif 'dropbox' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'dropbox'])
        transaction.update_cache = True
        transaction.source_to_update = 'dropbox.list'
    elif 'virtualbox-4.3' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'virtualbox'])
        transaction.update_cache = True
        transaction.source_to_update = 'virtualbox.list'

    transaction.install_packages()
