#! /usr/bin/python3
# -*- coding:utf-8 -*-
#
# Copyright 2012-2013 "Korora Project" <dev@kororaproject.org>
# Copyright 2013 "Manjaro Linux" <support@manjaro.org>
# Copyright 2014 Antergos
# Copyright 2015 Martin Wimpress <code@flexion.org>
# Copyright 2015 Luke Horwell <lukehorwell37+code@gmail.com>
#
# Ubuntu MATE Welcome is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ubuntu MATE Welcome is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ubuntu MATE Welcome. If not, see <http://www.gnu.org/licenses/>.
#

""" Welcome screen for Ubuntu MATE """

import apt
import gettext
import inspect
import json
import logging
import os
import platform
import signal
import subprocess
import sys
import tempfile
import urllib.error
import urllib.parse
import urllib.request
import webbrowser
from aptdaemon.client import AptClient
from aptdaemon.gtk3widgets import AptErrorDialog, AptConfirmDialog, AptProgressDialog
import aptdaemon.errors
from aptdaemon.enums import *
from gi.repository import GLib, GObject, Gdk, Gtk, Notify, WebKit
from ctypes import cdll, byref, create_string_buffer

# i18n
gettext.install("ubuntu-mate-welcome", "/usr/share/locale")

def set_proc_title(name=None):
    '''Set the process title'''

    if not name:
        name = os.path.basename(sys.argv[0])

    libc = cdll.LoadLibrary('libc.so.6')
    buff = create_string_buffer(len(name)+1)
    buff.value = name.encode("UTF-8")
    ret = libc.prctl(15, byref(buff), 0, 0, 0)

    if ret != 0:
        print("Failed to set process title")

    return ret

class SimpleApt(object):
    def __init__(self, packages, action):
        self._timeout=100
        self.packages = packages
        self.action = action
        self.source_to_update = None
        self.update_cache = False
        self.loop = GLib.MainLoop()
        self.client = AptClient()
        if self.packages:
            print('Processing: ' + ', '.join(self.packages))

    def on_error(self, error):
        if isinstance(error, aptdaemon.errors.NotAuthorizedError):
            # Silently ignore auth failures
            return
        elif not isinstance(error, aptdaemon.errors.TransactionFailed):
            # Catch internal errors of the client
            error = aptdaemon.errors.TransactionFailed(ERROR_UNKNOWN,str(error))
        error_dialog = AptErrorDialog(error)
        error_dialog.run()
        error_dialog.hide()

    def on_finished_fix_incomplete_install(self, transaction, status):
        self.loop.quit()
        if status == 'exit-success':
            Notify.init(_('Fixing incomplete install succeeded'))
            apt_notify=Notify.Notification.new(_('Successfully fixed an incomplete install.'), _('Fixing the incomplete install was successful.'), 'dialog-information')
            apt_notify.show()
            return True
        else:
            Notify.init(_('Fixing incomplete install failed'))
            apt_notify=Notify.Notification.new(_('Failed to fix incomplete install.'), _('Fixing the incomplete install failed.'), 'dialog-error')
            apt_notify.show()
            return False

    def on_finished_fix_broken_depends(self, transaction, status):
        self.loop.quit()
        if status == 'exit-success':
            Notify.init(_('Fixing broken dependencies succeeded'))
            apt_notify=Notify.Notification.new(_('Successfully fixed broken dependencies.'), _('Fixing the broken dependencies was successful.'), 'dialog-information')
            apt_notify.show()
            return True
        else:
            Notify.init(_('Fixing broken dependencies failed'))
            apt_notify=Notify.Notification.new(_('Failed to fix broken dependencies.'), _('Fixing the broken dependencies failed.'), 'dialog-error')
            apt_notify.show()
            return False

    def on_finished_update(self, transaction, status):
        # If the action is only to update do not display notifcations
        if self.action == 'update':
            self.loop.quit()
            if status == 'exit-success':
                return True
            else:
                return False
        else:
            if status != 'exit-success':
                self.do_notify(status)
                self.loop.quit()
                return False

            GLib.timeout_add(self._timeout,self.do_install)
            return True

    def on_finished_install(self, transaction, status):
        self.loop.quit()
        if status != 'exit-success':
            return False
        else:
            self.do_notify(status)

    def on_finished_remove(self, transaction, status):
        self.loop.quit()
        if status != 'exit-success':
            return False
        else:
            self.do_notify(status)

    def do_notify(self, status):
        print('Status: ' + status)
        if self.action == 'install':
            title = _('Install')
            noun = _('Installation of ')
            action = _('installed.')
        elif self.action == 'remove':
            title = _('Remove')
            noun = _('Removal of ')
            action = _('removed.')

        # Do not show notifications when updating the cache
        if self.action != 'update':
            if status == 'exit-success':
                Notify.init(title + ' ' + _('complete'))
                apt_notify=Notify.Notification.new(title + ' ' + _('complete'), ', '.join(self.packages) + ' ' + _('has been successfully ') +action, 'dialog-information')
            elif status == 'exit-cancelled':
                Notify.init(title + ' ' + _('cancelled'))
                apt_notify=Notify.Notification.new(title + ' ' + _('cancelled'), noun + ', '.join(self.packages) + ' ' + _('was cancelled.'), 'dialog-information')
            else:
                Notify.init(title + ' ' + _('failed'))
                apt_notify=Notify.Notification.new(title + ' ' + _('failed'), noun + ', '.join(self.packages) + ' ' + _('failed.'), 'dialog-error')

            apt_notify.show()

    def do_fix_incomplete_install(self):
        # Corresponds to: dpkg --configure -a
        apt_fix_incomplete = self.client.fix_incomplete_install()
        apt_fix_incomplete.connect("finished",self.on_finished_fix_incomplete_install)

        fix_incomplete_dialog = AptProgressDialog(apt_fix_incomplete)
        fix_incomplete_dialog.run(close_on_finished=True, show_error=True,
                reply_handler=lambda: True,
                error_handler=self.on_error,
                )
        return False

    def do_fix_broken_depends(self):
        # Corresponds to: apt-get --fix-broken install
        apt_fix_broken = self.client.fix_broken_depends()
        apt_fix_broken.connect("finished",self.on_finished_fix_broken_depends)

        fix_broken_dialog = AptProgressDialog(apt_fix_broken)
        fix_broken_dialog.run(close_on_finished=True, show_error=True,
                reply_handler=lambda: True,
                error_handler=self.on_error,
                )
        return False

    def do_update(self):
        if self.source_to_update:
            apt_update = self.client.update_cache(self.source_to_update)
        else:
            apt_update = self.client.update_cache()
        apt_update.connect("finished",self.on_finished_update)

        update_dialog = AptProgressDialog(apt_update)
        update_dialog.run(close_on_finished=True, show_error=True,
                reply_handler=lambda: True,
                error_handler=self.on_error,
                )
        return False

    def do_install(self):
        apt_install = self.client.install_packages(self.packages)
        apt_install.connect("finished", self.on_finished_install)

        install_dialog = AptProgressDialog(apt_install)
        install_dialog.run(close_on_finished=True, show_error=True,
                        reply_handler=lambda: True,
                        error_handler=self.on_error,
                        )
        return False

    def do_remove(self):
        apt_remove = self.client.remove_packages(self.packages)
        apt_remove.connect("finished", self.on_finished_remove)

        remove_dialog = AptProgressDialog(apt_remove)
        remove_dialog.run(close_on_finished=True, show_error=True,
                        reply_handler=lambda: True,
                        error_handler=self.on_error,
                        )
        return False

    def install_packages(self):
        if self.update_cache:
            GLib.timeout_add(self._timeout,self.do_update)
        else:
            GLib.timeout_add(self._timeout,self.do_install)
        self.loop.run()

    def remove_packages(self):
        GLib.timeout_add(self._timeout,self.do_remove)
        self.loop.run()

    def fix_incomplete_install(self):
        GLib.timeout_add(self._timeout,self.do_fix_incomplete_install)
        self.loop.run()

    def fix_broken_depends(self):
        GLib.timeout_add(self._timeout,self.do_fix_broken_depends)
        self.loop.run()

def update_repos():
    transaction = SimpleApt('', 'update')
    transaction.update_cache = True
    transaction.do_update()

def fix_incomplete_install():
    transaction = SimpleApt('', 'fix-incomplete-install')
    transaction.fix_incomplete_install()

def fix_broken_depends():
    transaction = SimpleApt('', 'fix-broken-depends')
    transaction.fix_broken_depends()

def process_packages(packages, action):
    if len(packages) and len(action):
        packages = packages.split(',')
    else:
        print('No package(s) supplied')
        return

    codename = platform.dist()[2]
    transaction = SimpleApt(packages, action)

    # Perform any pre-install configuration. Basically enabling repositories or
    # adding PPAs.
    if '0ad' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', '0ad', action])
        transaction.update_cache = True
        transaction.source_to_update = 'wfg-ubuntu-0ad-'+codename+'.list'
    elif 'appgrid' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'appgrid', action])
        transaction.update_cache = True
        transaction.source_to_update = 'appgrid-ubuntu-stable-'+codename+'.list'
    elif 'eviacam' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'eviacam', action])
        transaction.update_cache = True
        transaction.source_to_update = 'cesar-crea-si-ubuntu-eviacam-'+codename+'.list'
    elif 'flashplugin-installer' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'flashplugin-installer', action])
        transaction.update_cache = True
    elif 'git' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'git', action])
        transaction.source_to_update = 'git-core-ubuntu-ppa-'+codename+'.list'
        transaction.update_cache = True
    elif 'google-earth' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'google-earth', action])
        transaction.update_cache = True
        transaction.source_to_update = 'google-earth.list'
    elif 'google-chrome-stable' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'google-chrome', action])
        transaction.update_cache = True
        transaction.source_to_update = 'google-chrome.list'
    elif 'google-musicmanager-beta' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'google-musicmanager', action])
        transaction.update_cache = True
        transaction.source_to_update = 'google-musicmanager.list'
    elif 'google-talkplugin' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'google-talkplugin', action])
        transaction.update_cache = True
        transaction.source_to_update = 'google-talkplugin.list'
    elif 'insync' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'insync', action])
        transaction.update_cache = True
        transaction.source_to_update = 'insync.list'
    elif 'libdvdcss2' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'libdvdcss2', action])
        transaction.update_cache = True
        transaction.source_to_update = 'libdvdcss2.list'
    elif 'makemkv-bin' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'makemkv', action])
        transaction.update_cache = True
        transaction.source_to_update = 'heyarje-ubuntu-makemkv-beta-'+codename+'.list'
    elif ('minecraft-installer' in packages) or ('minecraft-server-installer' in packages):
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'minecraft', action])
        transaction.update_cache = True
        transaction.source_to_update = 'flexiondotorg-ubuntu-minecraft-'+codename+'.list'
    elif 'mumble' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'mumble', action])
        if codename == 'precise' or codename == 'trusty':
            transaction.update_cache = True
            transaction.source_to_update = 'mumble-ubuntu-release-'+codename+'.list'
    elif 'opera-stable' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'opera-stable', action])
        transaction.update_cache = True
        transaction.source_to_update = 'opera.list'
    elif 'pithos' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'pithos', action])
        if codename == 'precise' or codename == 'trusty':
            transaction.update_cache = True
            transaction.source_to_update = 'pithos-ubuntu-ppa-'+codename+'.list'
    elif 'simplescreenrecorder' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'simplescreenrecorder', action])
        transaction.update_cache = True
        transaction.source_to_update = 'maarten-baert-ubuntu-simplescreenrecorder-'+codename+'.list'
    elif 'skype' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'skype', action])
        transaction.update_cache = True
    elif 'spideroakone' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'spideroakone', action])
        transaction.update_cache = True
        transaction.source_to_update = 'spideroakone.list'
    elif 'spotify-client' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'spotify', action])
        transaction.update_cache = True
        transaction.source_to_update = 'spotify.list'
    elif 'steam-launcher' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'steam', action])
        transaction.update_cache = True
        transaction.source_to_update = 'steam.list'
    elif 'stellarium' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'stellarium', action])
        transaction.update_cache = True
        transaction.source_to_update = 'stellarium-ubuntu-stellarium-releases-'+codename+'.list'
    elif 'synapse' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'synapse', action])
        transaction.update_cache = True
        transaction.source_to_update = 'synapse-core-ubuntu-testing-'+codename+'.list'
    elif 'syncthing' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'syncthing', action])
        transaction.update_cache = True
        transaction.source_to_update = 'syncthing.list'
    elif 'telegram' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'telegram', action])
        transaction.update_cache = True
        transaction.source_to_update = 'atareao-ubuntu-telegram-'+codename+'.list'
    elif 'terminator' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'terminator', action])
        transaction.update_cache = True
        transaction.source_to_update = 'gnome-terminator-ubuntu-ppa-'+codename+'.list'
    elif 'tor-browser' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'tor-browser', action])
        transaction.update_cache = True
        transaction.source_to_update = 'webupd8team-ubuntu-tor-browser-'+codename+'.list'
    elif 'ubuntu-sdk' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'ubuntu-sdk', action])
        transaction.update_cache = True
        transaction.source_to_update = 'ubuntu-sdk-team-ubuntu-ppa-'+codename+'.list'
    elif 'uget' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'uget', action])
        transaction.update_cache = True
        transaction.source_to_update = 'plushuang-tw-ubuntu-uget-stable-'+codename+'.list'
    elif 'variety' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'variety', action])
        transaction.update_cache = True
        transaction.source_to_update = 'peterlevi-ubuntu-ppa-'+codename+'.list'
    elif 'veracrypt' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'veracrypt', action])
        transaction.update_cache = True
        transaction.source_to_update = 'unit193-ubuntu-encryption-'+codename+'.list'
    elif 'virtualbox-5.0' in packages:
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'virtualbox', action])
        transaction.update_cache = True
        transaction.source_to_update = 'virtualbox.list'
    elif ('x2goclient' in packages) or ('x2goserver' in packages):
        subprocess.call(['pkexec', '/usr/lib/ubuntu-mate/ubuntu-mate-welcome-repository-installer', 'x2go', action])
        transaction.update_cache = True
        transaction.source_to_update = 'x2go-ubuntu-stable-'+codename+'.list'

    if transaction.action == 'install':
        transaction.install_packages()
    elif transaction.action == 'remove':
        transaction.remove_packages()
    else:
        print('The requested action is unknown')


class WelcomeConfig(object):
    """ Manages Welcome configuration """
    def __init__(self):
        # store our base architecture
        self.os_version = platform.dist()[1]
        self.os_codename = platform.dist()[2]
        self.os_title = 'Ubuntu MATE ' + self.os_version
        self._arch = os.uname()[4]

        # store we are a live CD session
        self._live = os.path.exists('/usr/share/glib-2.0/schemas/zubuntu-mate-live.gschema.override')

        # store full path to our binary
        self._welcome_bin_path = os.path.abspath(inspect.getfile(inspect.currentframe()))

        # directory for the configuration
        self._config_dir = os.path.expanduser('~/.config/ubuntu-mate/welcome/')

        # autostart directory
        self._autostart_dir = os.path.expanduser('~/.config/autostart/')

        # full path to the autostart symlink
        self._autostart_path = os.path.expanduser(os.path.join(self._autostart_dir, 'ubuntu-mate-welcome.desktop'))

        # ensure our config and autostart directories exists
        for _dir in [self._config_dir, self._autostart_dir]:
            if not os.path.exists(_dir):
                try:
                    os.makedirs(_dir)
                except OSError as err:
                    print(err)
                    pass

        # does autostart symlink exist
        self._autostart = os.path.exists(self._autostart_path)

    @property
    def arch(self):
        return self._arch

    @property
    def autostart(self):
        return self._autostart

    @autostart.setter
    def autostart(self, state):
        if state and not os.path.exists(self._autostart_path):
            # create the autostart symlink
            try:
                os.symlink('/usr/share/applications/ubuntu-mate-welcome.desktop', self._autostart_path)
            except OSError as err:
                print(err)
                pass
        elif not state and os.path.exists(self._autostart_path):
            # remove the autostart symlink
            try:
                os.unlink(self._autostart_path)
            except OSError as err:
                print(err)
                pass

        # determine autostart state based on absence of the disable file
        self._autostart = os.path.exists(self._autostart_path)

    @property
    def live(self):
        return self._live

class AppView(WebKit.WebView):
    def __init__(self):
        WebKit.WebView.__init__(self)

        self._config = WelcomeConfig()
        self._apt_cache = apt.Cache()
        self.connect('load-finished', self._load_finished_cb)
        self.connect('navigation-policy-decision-requested', self._nav_request_policy_decision_cb)
        self.l_uri = None

        # disable right-click context menu as it isn't needed.
        self.props.settings.props.enable_default_context_menu = False

    def _push_config(self):
        self.execute_script("$('#os_title').html('%s')" % self._config.os_title)
        self.execute_script("$('#os_version').html('%s')" % self._config.os_version)
        self.execute_script("$('#autostart').toggleClass('fa-check-square', %s).toggleClass('fa-square', %s)" % (json.dumps(self._config.autostart), json.dumps(not self._config.autostart)))

        # If this is a Live session (booted from ISO) show the
        # 'Install OS' button, if runningon an installed system show the
        # 'Install Software' button.
        if self._config.live:
            self.execute_script("$('#install').show();")
            self.execute_script("$('#software').hide();")
            self.execute_script("$('.live-session').hide();")
            self.execute_script("$('.live-session-only').show();")
        else:
            self.execute_script("$('#install').hide();")
            self.execute_script("$('#software').show();")
            self.execute_script("$('.live-session').show();")
            self.execute_script("$('.live-session-only').hide();")

        # Hide applications that are not supported on some architectures.
        # If neither a i686 or x86_64, we must be running on the Raspberry Pi port (armv7)
        if self._config.arch == 'i686':
            self.execute_script("$('.i686-only').show();")
            self.execute_script("$('.x86_64-only').hide();")
            self.execute_script("$('.pc-only').show();")
            self.execute_script("$('.rpi-only').hide();")
        elif self._config.arch == 'x86_64':
            self.execute_script("$('.i686-only').hide();")
            self.execute_script("$('.x86_64-only').show();")
            self.execute_script("$('.pc-only').show();")
            self.execute_script("$('.rpi-only').hide();")
        else:
            # Not a PC, so could be PowerPC or ARM.
            self.execute_script("$('.i686-only').hide();")
            self.execute_script("$('.x86_64-only').hide();")
            self.execute_script("$('.pc-only').hide();")

            # If we find a Raspberry Pi 2 kernel, we're running on a Pi 2.
            if os.path.isfile(os.path.join('/','boot/','kernel7.img')):
                self.execute_script("$('.rpi-only').show();")
            else:
                self.execute_script("$('.rpi-only').hide();")

        if self._apt_cache['hexchat'].is_installed:
            self.execute_script("$('.hexchat').show();")
            self.execute_script("$('.webchat').hide();")
        else:
            self.execute_script("$('.hexchat').hide();")
            self.execute_script("$('.webchat').show();")

        # Display information tailored to graphics vendor (Getting Started / Drivers)
        self.execute_script('var graphicsVendor = "' + graphicsVendor + '";')
        self.execute_script('var graphicsGrep = "' + graphicsGrep + '";')

        # Display warnings if the user is not connected to the internet.
        if onlineStatus == True:
            self.execute_script("$('.offline').hide();")
            self.execute_script("$('.online').show();")
        else:
            self.execute_script("$('.offline').show();")
            self.execute_script("$('.online').hide();")

        # Change button states for Software.html
        # TODO - Read this from YAML or JSON
        for package in ['0ad', 'appgrid', 'asunder',
        'audacity', 'bleachbit', 'blender', 'bzr', 'caja-dropbox', 'caja-share',
        'calibre', 'chromium-browser', 'darktable', 'dia-gnome', 'eviacam',
        'filezilla', 'firefox', 'flashplugin-installer', 'geany', 'gimp',
        'git', 'glabels', 'gnome-disk-utility', 'gnome-schedule', 'gnote',
        'gnucash', 'gramps', 'google-chrome-stable', 'google-earth-stable',
        'google-musicmanager-beta', 'google-talkplugin', 'handbrake',
        'hardinfo', 'icedtea-7-plugin', 'inkscape', 'insync',
        'libavcodec-extra', 'libdvdcss2', 'makemkv-bin', 'meld',
        'minecraft-installer', 'minecraft-server-installer', 'mumble',
        'opera-stable', 'pavucontrol', 'pithos', 'pitivi', 'planner',
        'pysolfc', 'rapid-photo-downloader', 'redshift', 'remmina',
        'scribus', 'simplescreenrecorder', 'skype', 'software-center',
        'spideroakone', 'spotify-client', 'steam-launcher', 'stellarium',
        'supertuxkart', 'sweethome3d', 'synapse', 'synaptic', 'syncthing',
        'telegram', 'terminator', 'tor-browser', 'ubuntu-sdk', 'uget',
        'variety', 'veracrypt', 'virtualbox-5.0', 'workrave', 'x2goclient',
        'x2goserver', 'zim']:
            if package == 'virtualbox-5.0':
                css_class = 'virtualbox'
            else:
                css_class = package

            try:
                if self._apt_cache[package].is_installed:
                    self.execute_script("$('."+css_class+"-install').hide();")
                    self.execute_script("$('."+css_class+"-reinstall').show();")
                    self.execute_script("$('."+css_class+"-remove').show();")
                else:
                    self.execute_script("$('."+css_class+"-install').show();")
                    self.execute_script("$('."+css_class+"-reinstall').hide();")
                    self.execute_script("$('."+css_class+"-remove').hide();")
            except:
                self.execute_script("$('."+css_class+"-install').show();")
                self.execute_script("$('."+css_class+"-reinstall').hide();")
                self.execute_script("$('."+css_class+"-remove').hide();")

    def _load_finished_cb(self, view, frame):
        self._push_config()

    def _nav_request_policy_decision_cb(self, view, frame, net_req, nav_act, pol_dec):
        uri = net_req.get_uri()

        try:
            if uri.index('#') > 0:
                uri = uri[:uri.index('#')]
        except ValueError:
            pass

        if uri == self.l_uri:
            pol_dec.use()
            return True

        if uri.startswith('cmd://'):
            self._do_command(uri)
            return True

        self.l_uri = uri

        page = urllib.request.urlopen(uri)
        frame.load_string(page.read().decode(), "text/html", "iso-8859-15", page.geturl())
        pol_dec.ignore()
        return True

    def _do_command(self, uri):
        if uri.startswith('cmd://'):
            uri = uri[6:]

        if uri.startswith('apt-install?'):
            process_packages(uri[12:], 'install')
            self._apt_cache.close()
            self._apt_cache = apt.Cache()
            self._push_config()
        elif uri.startswith('apt-remove?'):
            process_packages(uri[11:], 'remove')
            self._apt_cache.close()
            self._apt_cache = apt.Cache()
            self._push_config()
        elif uri == 'apt-update':
            update_repos()
            self._apt_cache.close()
            self._apt_cache = apt.Cache()
            self._push_config()
        elif uri == 'fix-incomplete-install':
            fix_incomplete_install()
            self._apt_cache.close()
            self._apt_cache = apt.Cache()
            self._push_config()
        elif uri == 'fix-broken-depends':
            fix_broken_depends()
            self._apt_cache.close()
            self._apt_cache = apt.Cache()
            self._push_config()
        elif uri == 'autostart':
            self._config.autostart ^= True
            self._push_config()
        elif uri == 'install':
            subprocess.Popen(['ubiquity','gtk_ui'])
        elif uri == 'backup':
            subprocess.Popen(['deja-dup-preferences'])
        elif uri == 'chatroom':
            subprocess.Popen(['hexchat','IRC://irc.freenode.net/ubuntu-mate'])
        elif uri == 'control':
            subprocess.Popen(['mate-control-center'])
        elif uri == 'drivers':
            subprocess.Popen(['software-properties-gtk','--open-tab=4'])
        elif uri == 'firewall':
            subprocess.Popen(['gufw'])
        elif uri == 'language':
            subprocess.Popen(['gnome-language-selector'])
        elif uri == 'users':
            subprocess.Popen(['users-admin'])
        elif uri == 'quit':
            Gtk.main_quit()
        elif uri == 'tweak':
            subprocess.Popen(['mate-tweak'])
        elif uri == 'update':
            subprocess.Popen(['update-manager'])
        elif uri == 'gparted':
            subprocess.Popen(['gparted-pkexec'])
        elif uri == 'sysmonitor':
            subprocess.Popen(['mate-system-monitor'])
        elif uri.startswith('run?'):
            subprocess.Popen([uri[4:]])
        elif uri.startswith('link?'):
            webbrowser.open_new_tab(uri[5:])
        elif uri == 'checkInternetConnection':
            checkInternetConnection()
            if onlineStatus == True:
                self.execute_script("$('.offline').hide();")
                self.execute_script("$('.online').show();")
            else:
                self.execute_script("$('.offline').show();")
                self.execute_script("$('.online').hide();")
        else:
            print('Unknown command: %s' % uri)

class WelcomeApp(object):
    def __init__(self):
        # establish our location
        self._location = os.path.dirname( os.path.abspath(inspect.getfile(inspect.currentframe())) )

        # check for relative path
        if( os.path.exists( os.path.join(self._location, 'data/' ) ) ):
            print('Using relative path for data source. Non-production testing.')
            self._data_path = os.path.join(self._location, 'data/')
        elif( os.path.exists('/usr/share/ubuntu-mate-welcome/') ):
            print('Using /usr/share/ubuntu-mate-welcome/ path.')
            self._data_path = '/usr/share/ubuntu-mate-welcome/'
        else:
            print('Unable to source the ubuntu-mate-welcome data directory.')
            sys.exit(1)

        self._build_app()

    def _build_app(self):

        # build window
        w = Gtk.Window()
        w.set_position(Gtk.WindowPosition.CENTER)
        w.set_wmclass('Ubuntu MATE Welcome', 'Ubuntu MATE Welcome')
        w.set_title('Welcome to Ubuntu MATE')

        # http://askubuntu.com/questions/153549/how-to-detect-a-computers-physical-screen-size-in-gtk
        s = Gdk.Screen.get_default()
        if s.get_height() <= 600:
            w.set_size_request(768, 528)
        else:
            w.set_size_request(768, 552)

        icon_dir = os.path.join(self._data_path, 'img', 'welcome', 'ubuntu-mate-icon.svg')
        w.set_icon_from_file(icon_dir)

        # build webkit container
        mv = AppView()

        # load our index file
        file = os.path.abspath(os.path.join(self._data_path, 'splash.html'))
        uri = 'file://' + urllib.request.pathname2url(file)
        mv.open(uri)

        # build scrolled window widget and add our appview container
        sw = Gtk.ScrolledWindow()
        sw.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        sw.add(mv)

        # build a an autoexpanding box and add our scrolled window
        b = Gtk.VBox(homogeneous=False, spacing=0)
        b.pack_start(sw, expand=True, fill=True, padding=0)

        # add the box to the parent window and show
        w.add(b)
        w.connect('delete-event', self.close)
        w.show_all()

        self._window = w
        self._appView = mv

    def run(self):
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        Gtk.main()

    def close(self, p1, p2):
        Gtk.main_quit(p1, p2);

if __name__ == "__main__":
    # Before the app starts, check if the user is connected to the internet.
    def checkInternetConnection():
      print('Testing Connection... ', end="")
      global onlineStatus
      try:
          urllib.request.urlopen("http://archive.ubuntu.com/")
          print("Success!")
          onlineStatus = True
      except:
          print("Unreachable.")
          onlineStatus = False

    # Attempt to detect graphics manufacturer.
    # FIXME: Does not detect dual graphics.
    def detectGraphics():
      print('Detecting graphics vendor... ', end="")
      output = subprocess.Popen('lspci | grep VGA', stdout=subprocess.PIPE, shell='True').communicate()[0]
      output = output.decode(encoding='UTF-8')
      # Scan for and set known brand name.
      global graphicsVendor
      global graphicsGrep
      if output.find('NVIDIA') != -1:
        graphicsVendor = 'NVIDIA'
      elif output.find('AMD') != -1:
        graphicsVendor = 'AMD'
      elif output.find('Intel') != -1:
        graphicsVendor = 'Intel'
      elif output.find('VirtualBox') != -1:
        graphicsVendor = 'VirtualBox'
      else:
        graphicsVendor = 'Unknown'
      print(graphicsVendor)
      graphicsGrep = repr(output)
      graphicsGrep = graphicsGrep.split("controller: ",1)[1]
      graphicsGrep = graphicsGrep.split("\\n",1)[0]

    checkInternetConnection()
    detectGraphics()
    set_proc_title()
    app = WelcomeApp()
    app.run()
