#! /usr/bin/python3
# -*- coding:utf-8 -*-
#
# Copyright 2012-2013 "Korora Project" <dev@kororaproject.org>
# Copyright 2013 "Manjaro Linux" <support@manjaro.org>
# Copyright 2014 Antergos
# Copyright 2015-2016 Martin Wimpress <code@flexion.org>
# Copyright 2015-2018 Luke Horwell <luke@ubuntu-mate.org>
#
# Ubuntu MATE Welcome is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ubuntu MATE Welcome is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ubuntu MATE Welcome. If not, see <http://www.gnu.org/licenses/>.
#

"""
Welcome application for greeting the user on their initial boot or live session
of the Ubuntu MATE operating system.
"""

import gi
gi.require_version("Gdk", "3.0")
gi.require_version("Gtk", "3.0")
gi.require_version("WebKit2", "4.0")
from gi.repository import GLib, Gdk, Gtk, WebKit2

import argparse
import gettext
import os
import platform
import setproctitle
import signal

# Import modules shared with Software Boutique.
try:
    import pylib_boutique.preferences as Preferences
    import pylib_boutique.common as BoutiqueCommon
except ImportError:
    import software_boutique.preferences as Preferences
    import software_boutique.common as BoutiqueCommon

# Import Welcome pages
try:
    import pylib.pages as Pages
    import pylib.Common as Common
    relative_path = True
except ImportError:
    import ubuntu_mate_welcome.pages as Pages
    import ubuntu_mate_welcome.Common as Common
    relative_path = False


# Dictonary to store common variables throughout Welcome and its subpages
variables = {
    # Internals
    "data_path": "",
    "current_page": "",
    "override_initial_page": None,
    "pages": {
        "splash": Pages.Splash,
        "main_menu": Pages.MainMenu,
        "community": Pages.Community,
        "introduction": Pages.Introduction,
        "features": Pages.Features,
        "shop": Pages.Shop,
        "getinvolved": Pages.GetInvolved,
        "donate": Pages.Donate,
        "gettingstarted": Pages.GettingStarted,
        "hellolive": Pages.HelloLive,
        "helloguest": Pages.HelloGuest,
        "raspberrypi": Pages.RaspberryPi
    },
    "sessions": ["normal", "guest", "live", "pi", "vbox"],
    "objects": {
        "app": None,
        "arg": None,
        "pref": None,
        "dbg": None,
        "run_js": None,
        "update_page": None,
        "change_page": None,
        "ui": Common.UI
    },
    "page_fade_speed": 250,
    "page_fade_wait": 0.25,

    # UI
    "welcome_version": "18.04",
    "dark_mode": False,
    "locale": "en_US",
    "run_at_startup": False,

    # Features
    "opted_updates": False,
    "internet_detected": False,

    # Session
    "session_type": "normal",           # normal / live / guest / vbox / rpi,
    "arch": "",                         # e.g. amd64 / i386 / powerpc / armhf / arm64
    "os_name": platform.dist()[0],      # e.g. Ubuntu
    "os_version": platform.dist()[1],   # e.g. 18.04
    "os_codename": platform.dist()[2],  # e.g. bionic
    "ubuntu_mate_detected": True,
    "boot_mode": "BIOS",                # BIOS / UEFI / Yaboot / Raspberry Pi

    # Envrionment
    "theme_name": "Ambiant-MATE",
    "dpi": 96
}


class AppView(WebKit2.WebView):
    """
    WebView object used for presenting the HTML5-based application and
    communicating back to the Python application.
    """
    def __init__(self):
        """
        Initalises WebKit2 WebView for rendering and displaying the page.
        """
        webkit = WebKit2
        webkit.WebView.__init__(self)
        self.set_background_color(Gdk.RGBA(72, 72, 72, 0.28))

        # Connect signals to application
        self.connect("load-changed", self._load_changed_cb)
        self.connect("notify::title", self._title_changed_cb)
        self.connect("context-menu", self._context_menu_cb)

        # Enable keyboard navigation
        self.get_settings().set_enable_spatial_navigation(True)
        self.get_settings().set_enable_caret_browsing(True)

        # Show console messages in stdout if we're debugging.
        if dbg.verbose_level >= 2:
            self.get_settings().set_enable_write_console_messages_to_stdout(True)

        # Enable web inspector for debugging
        if dbg.verbose_level == 3:
            self.get_settings().set_property("enable-developer-extras", True)
            inspector = self.get_inspector()
            inspector.show()

    def run_js(self, function):
        """
        Runs a JavaScript function on the page, regardless of which thread it is called from.
        GTK+ operations must be performed on the same thread to prevent crashes.
        """
        GLib.idle_add(self._run_js, function)

    def _run_js(self, function):
        """
        Runs a JavaScript function on the page when invoked from run_js()
        """
        self.run_javascript(function)
        dbg.stdout("=> " + function, dbg.debug, 2)
        return GLib.SOURCE_REMOVE

    def _title_changed_cb(self, view, frame):
        """
        Callback when page title has changed.

        This is used to communicate from the HTML page to Python.
        """
        title = self.get_title()
        if title != 'null' and title != '' and title != None:
            dbg.stdout("=> Command: " + title, dbg.debug, 2)
            self._do_command(title)

    def _load_changed_cb(self, view, frame):
        """
        Callback when page URI has changed.

        This loads the rest of the program once the initial HTML page is loaded.
        """
        # Push contents to page when finished loading.
        if not self.is_loading() and self.get_uri() != "":
            dbg.stdout("Page finished loading", dbg.success, 2)
            self._finished_loading()
            return

    def _context_menu_cb(self, webview, menu, event, htr, user_data=None):
        """
        Callback when right clicking in the area.

        This just disables the context menu.
        """
        return True

    def _finished_loading(self):
        """
        Runs as soon as the initial page has loaded.
        """
        Common.spawn_thread(dbg, self.change_page, ["splash"])

    def _do_command(self, cmd):
        """
        Invoked from page - runs a command. Parameters are separated by '?'.

        Commands are invoked from JavaScript using cmd('')
        """
        parameters = cmd.split('?')[1:]

        # Try page specific commands.
        if variables["pages"][variables["current_page"]].do_command(variables, cmd):
            dbg.stdout("Successfully ran page command: " + cmd, dbg.success, 2)
            return True

        # Global commands
        if cmd == "quit":
            app.close()
        elif cmd.startswith("change-page?"):
            target_page = cmd.split('?')[1]
            self.change_page(target_page)
        else:
            dbg.stdout("Unimplemented command: " + cmd, dbg.error)
            return

        dbg.stdout("Successfully ran global command: " + cmd, dbg.success, 2)

    def update_page(self, element, function, parm1=None, parm2=None):
        """
        Runs a JavaScript jQuery function on the page,
        ensuring correctly parsed quotes.
        """
        if parm1 and parm2:
            js_buffer = '$("' + element + '").' + function + "('" + str(parm1).replace("'", '\\\'') + "', '" + str(parm2).replace("'", '\\\'') + "')"
        if parm1:
            js_buffer = '$("' + element + '").' + function + "('" + str(parm1).replace("'", '\\\'') + "')"
        else:
            js_buffer = '$("' + element + '").' + function + '()'

        self.run_js(js_buffer)
        dbg.stdout("=> " + js_buffer, dbg.debug, 2)

    def change_page(self, new_page):
        """
        Transition in and out of pages.
        """
        current_page = variables["current_page"]

        # Only execute the exit function if leaving a previous page.
        # When the application first starts, this is blank.
        if not current_page == "":
            dbg.stdout("Leaving page: " + current_page, dbg.debug, 1)

            fade_speed = variables["page_fade_speed"]
            for element_id in ["#header-left", "#header-right", "#footer-left", "#footer-right"]:
                self.update_page(element_id, "fadeOut", fade_speed)
            variables["pages"][current_page].page_exit(variables)

        dbg.stdout("Entering page: " + new_page, dbg.debug, 1)
        self.update_page("content", "remove")
        for element_id in ["#header-left", "#header-right", "#footer-left", "#footer-right"]:
            self.update_page(element_id, "html", " ")
        self.update_page("main", "append", "<content></content>")
        variables["current_page"] = new_page
        variables["pages"][new_page].page_enter(variables)


class WelcomeApp(object):
    """
    Logic for building and bootstrapping the Welcome application window.
    """
    def __init__(self):
        """
        Prepares variables specific to Welcome's runtime.
        """
        self.webkit = None
        self.load_app()

    def load_app(self):
        """
        Builds the application's main window.
        """
        w = Gtk.Window()
        w.set_position(Gtk.WindowPosition.CENTER)
        w.set_wmclass("ubuntu-mate-welcome", "ubuntu-mate-welcome")
        w.set_title(_("Welcome"))
        w.modify_bg(Gtk.StateType(0), Gdk.Color(72, 72, 72))

        # http://askubuntu.com/questions/153549/how-to-detect-a-computers-physical-screen-size-in-gtk
        s = Gdk.Screen.get_default()
        if s.get_height() <= 600:
            w.set_size_request(768, 528)
        else:
            w.set_size_request(800, 552)

        icon_dir = os.path.join(variables["data_path"], "img", "welcome", "ubuntu-mate-icon.svg")
        w.set_icon_from_file(icon_dir)

        # Build WebKit2 container
        self.webkit = AppView()

        # Load the starting page
        self.webkit.load_uri("file://" + os.path.join(variables["data_path"], "welcome.html"))

        # Build scrolled window widget and add our appview container
        sw = Gtk.ScrolledWindow()
        sw.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        sw.add(self.webkit)

        # Build an autoexpanding box and add our scrolled window
        b = Gtk.VBox(homogeneous=False, spacing=0)
        b.pack_start(sw, expand=True, fill=True, padding=0)

        # Add the box to the parent window and show
        w.add(b)
        w.connect('delete-event', self.close)
        w.show_all()

        self._window = w
        variables["objects"]["update_page"] = self.webkit.update_page
        variables["objects"]["change_page"] = self.webkit.change_page
        variables["objects"]["run_js"] = self.webkit.run_js

    def run(self):
        """
        Start the application.
        """
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        Gtk.main()

    def close(self, window=None, event=None):
        """
        Stop the application.
        """
        dbg.stdout("Application Closed", dbg.debug, 2)
        Gtk.main_quit()
        exit(0)


def process_arguments():
    """
    Checks and assigns arguments intended for diagnosis and testing purposes.
    """
    parser = argparse.ArgumentParser(add_help=False)
    parser._optionals.title = _("Optional arguments")
    parser.add_argument("-h", "--help", help=_("Show this help message and exit"), action="help")
    parser.add_argument("--version", help=_("Print progran version and exit"), action="store_true")
    parser.add_argument("-v", "--verbose", help=_("Be verbose to stdout"), action="store_true")
    parser.add_argument("-vv", "-d", "--debug", help=_("Be very verbose (for debugging)"), action="store_true")
    parser.add_argument("--locale", help=_("Force locale for interface"))
    parser.add_argument("--force-net", help=_("Assume network capabilities"), action="store_true")
    parser.add_argument("--force-no-net", help=_("Assume network is unreachable"), action="store_true")
    parser.add_argument("--force-session", help=_("Show information for a specific environment."), choices=variables["sessions"])
    parser.add_argument("--jump-to", help=_("Set the initial starting page."), choices=variables["pages"].keys())
    parser.add_argument("-b", "--boutique", "--software-only", help=_("Opens the Software Boutique application"), action="store_true")

    # For front-end debugging (developer tools)
    parser.add_argument("--inspect", help=argparse.SUPPRESS, action="store_true")

    arg = parser.parse_args()

    if arg.version:
        dbg.stdout("Version: " + variables["welcome_version"])
        exit(0)

    if arg.verbose:
        dbg.stdout("Running in verbose mode.", dbg.action)
        dbg.verbose_level = 1

    if arg.debug:
        dbg.stdout("Running in debugging mode.", dbg.action)
        dbg.verbose_level = 2
        variables["locale"] = 'null'

    if arg.inspect:
        dbg.verbose_level = 3

    if arg.force_session:
        variables["session"] = arg.force_session
        dbg.stdout("Running as session: " + self.simulate_session, dbg.action)

    if arg.force_no_net:
        variables["internet_detected"] = False
        dbg.stdout("Running with internet connectivity features enabled.", dbg.action)

    if arg.force_net:
        variables["internet_detected"] = True
        dbg.stdout("Running without internet connectivity featured disabled.", dbg.action)

    if arg.boutique:
        dbg.stdout("Software Boutique is no longer part of Welcome.", dbg.warning)
        if os.path.exists("/usr/bin/software-boutique"):
            dbg.stdout("In future, launch with 'software-boutique' instead.", dbg.warning)
            os.execv("/usr/bin/software-boutique", [""])
        else:
            dbg.stdout("Software Boutique not found. It may not be installed.", dbg.error)
            exit(1)

    if arg.locale:
        variables["locale"] = arg.locale
        dbg.stdout("Forcing locale: " + arg.locale, dbg.action)

    if arg.jump_to:
        variables["override_initial_page"] = arg.jump_to
        dbg.stdout("Initial page set: " + arg.jump_to, dbg.action)

    return arg


if __name__ == "__main__":
    """
    Main Initialisation
    """
    setproctitle.setproctitle("ubuntu-mate-welcome")

    _ = Common.setup_translations(__file__, "ubuntu-mate-welcome")

    dbg = BoutiqueCommon.Debugging()
    variables["objects"]["dbg"] = dbg

    arg = process_arguments()
    variables["objects"]["arg"] = arg
    variables["data_path"] = Common.get_data_source(dbg, __file__)

    pref = Preferences.Preferences(dbg, "preferences", "ubuntu-mate-welcome")
    variables["objects"]["pref"] = pref

    app = WelcomeApp()
    variables["objects"]["app"] = app

    dbg.stdout("Application Ready.", dbg.debug, 2)
    app.run()
